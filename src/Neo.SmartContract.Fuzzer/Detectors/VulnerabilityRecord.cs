using System.Collections.Generic;
using Neo.SmartContract.Fuzzer.SymbolicExecution.Types;

namespace Neo.SmartContract.Fuzzer.Detectors
{
    /// <summary>
    /// Represents a potential vulnerability detected during symbolic execution.
    /// </summary>
    public class VulnerabilityRecord
    {
        /// <summary>
        /// Type or category of the vulnerability (e.g., "IntegerOverflow", "Reentrancy", "UnhandledException").
        /// </summary>
        public string Type { get; }

        /// <summary>
        /// A description of the detected vulnerability and the conditions under which it occurs.
        /// </summary>
        public string Description { get; }

        /// <summary>
        /// The final symbolic state where the vulnerability was detected.
        /// </summary>
        public Neo.SmartContract.Fuzzer.SymbolicExecution.Types.SymbolicState TriggeringState { get; }

        /// <summary>
        /// Optional: Specific instruction address or context related to the vulnerability.
        /// </summary>
        public int? InstructionPointer { get; set; }

        /// <summary>
        /// The severity of the vulnerability (e.g., "High", "Medium", "Low").
        /// </summary>
        public string Severity { get; }

        /// <summary>
        /// Remediation advice for fixing the vulnerability.
        /// </summary>
        public string Remediation { get; }

        /// <summary>
        /// Creates a new VulnerabilityRecord with the specified parameters.
        /// </summary>
        /// <param name="type">Type or category of the vulnerability.</param>
        /// <param name="description">Description of the vulnerability.</param>
        /// <param name="triggeringState">The symbolic state where the vulnerability was detected.</param>
        /// <param name="instructionPointer">Optional instruction pointer related to the vulnerability.</param>
        public VulnerabilityRecord(string type, string description, Neo.SmartContract.Fuzzer.SymbolicExecution.Types.SymbolicState triggeringState, int? instructionPointer = null)
        {
            Type = type;
            Description = description;
            TriggeringState = triggeringState;
            InstructionPointer = instructionPointer;
            Severity = "Medium"; // Default severity
            Remediation = ""; // Default remediation
        }

        /// <summary>
        /// Creates a new VulnerabilityRecord with the specified parameters, including severity and remediation.
        /// </summary>
        /// <param name="type">Type or category of the vulnerability.</param>
        /// <param name="description">Description of the vulnerability.</param>
        /// <param name="triggeringState">The symbolic state where the vulnerability was detected.</param>
        /// <param name="instructionPointer">Optional instruction pointer related to the vulnerability.</param>
        /// <param name="severity">The severity of the vulnerability.</param>
        /// <param name="remediation">Remediation advice for fixing the vulnerability.</param>
        public VulnerabilityRecord(string type, string description, Neo.SmartContract.Fuzzer.SymbolicExecution.Types.SymbolicState triggeringState, int? instructionPointer, string severity, string remediation)
        {
            Type = type;
            Description = description;
            TriggeringState = triggeringState;
            InstructionPointer = instructionPointer;
            Severity = severity;
            Remediation = remediation;
        }

        public override string ToString()
        {
            string ipInfo = InstructionPointer.HasValue ? $" at IP: {InstructionPointer.Value}" : "";
            string severityInfo = !string.IsNullOrEmpty(Severity) ? $" [Severity: {Severity}]" : "";
            string remediationInfo = !string.IsNullOrEmpty(Remediation) ? $"\nRemediation: {Remediation}" : "";

            return $"[{Type}]{severityInfo} {Description}{ipInfo}\nConstraints: [{string.Join(" && ", TriggeringState.PathConstraints)}]{remediationInfo}";
        }
    }
}
