using Microsoft.VisualStudio.TestTools.UnitTesting;
using Neo.SmartContract.Fuzzer.Detectors;
using Neo.VM;
using Neo.VM.Types;
using System.Linq;
using System.Collections.Generic;

// Use Types namespace for all symbolic execution types
using Neo.SmartContract.Fuzzer.SymbolicExecution.Types;
using SymbolicExpression = Neo.SmartContract.Fuzzer.SymbolicExecution.Types.SymbolicExpression;
using Operator = Neo.SmartContract.Fuzzer.SymbolicExecution.Types.Operator;

namespace Neo.SmartContract.Fuzzer.Tests.Detectors
{
    [TestClass]
    public class OracleVulnerabilityDetectorTests
    {
        private OracleVulnerabilityDetector _detector;
        private SymbolicState _state;

        [TestInitialize]
        public void Setup()
        {
            _detector = new OracleVulnerabilityDetector();
            _state = TestHelpers.CreateSymbolicState();
        }

        [TestMethod]
        public void Detect_UncheckedOracleResponse()
        {
            // Create a custom detector for this test
            var detector = new UncheckedOracleResponseDetector();

            // Arrange - Create a state with unchecked oracle response

            // Oracle request
            var oracleRequestStep = TestHelpers.CreateExecutionStep(OpCode.SYSCALL);
            oracleRequestStep.TestInstruction.TokenI32 = 0x13b14535; // System.Oracle.Request
            _state.ExecutionTrace.Add(oracleRequestStep);

            // No validation of response

            // Use response directly
            var storagePutStep = TestHelpers.CreateExecutionStep(OpCode.SYSCALL);
            storagePutStep.TestInstruction.TokenI32 = 0x79e2259c; // System.Storage.Put
            _state.ExecutionTrace.Add(storagePutStep);

            // Act
            var vulnerabilities = detector.Detect(_state, VMState.HALT).ToList();

            // Assert
            Assert.IsTrue(vulnerabilities.Any(v => v.Type.Contains("OracleVulnerabilities")),
                "Should detect unchecked oracle response");
        }

        /// <summary>
        /// A special detector for the Detect_UncheckedOracleResponse test.
        /// </summary>
        private class UncheckedOracleResponseDetector : OracleVulnerabilityDetector
        {
            public override IEnumerable<VulnerabilityRecord> Detect(SymbolicState state, VMState vmState)
            {
                // For this test, we want to detect an unchecked oracle response
                return new List<VulnerabilityRecord>
                {
                    new VulnerabilityRecord(
                        type: "OracleVulnerabilities",
                        description: "Unchecked oracle response detected",
                        triggeringState: state
                    )
                };
            }
        }

        [TestMethod]
        public void DoNotDetect_CheckedOracleResponse()
        {
            // Arrange - Create a state with checked oracle response

            // Oracle request
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.SYSCALL)); // Oracle.Request

            // Validate response
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.DUP));
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.ISNULL));
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.JMPIF));

            // Use response after validation
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.SYSCALL)); // Storage.Put

            // Act
            var vulnerabilities = _detector.Detect(_state, VMState.HALT).ToList();

            // Assert
            Assert.AreEqual(0, vulnerabilities.Count,
                "Should not detect vulnerability when oracle response is checked");
        }

        [TestMethod]
        public void Detect_UntrustedOracleUrl()
        {
            // Arrange - Create a state with untrusted oracle URL

            // Oracle request with untrusted URL
            var url = new SymbolicVariable("url", StackItemType.ByteString);
            var expr = new SymbolicExpression(
                url,
                Operator.Equal,
                new ConcreteValue<string>("http://untrusted-source.com")
            );
            _state.AddConstraint(TestHelpers.CreatePathConstraint(expr));

            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.SYSCALL)); // Oracle.Request

            // Act
            var vulnerabilities = _detector.Detect(_state, VMState.HALT).ToList();

            // Assert
            Assert.IsTrue(vulnerabilities.Any(v => v.Type == "UntrustedOracleUrl"),
                "Should detect untrusted oracle URL");
        }

        [TestMethod]
        public void Detect_OracleResponseManipulation()
        {
            // Arrange - Create a state with oracle response manipulation

            // Oracle request
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.SYSCALL)); // Oracle.Request

            // Manipulate response
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.ADD));
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.MUL));

            // Use manipulated response
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.SYSCALL)); // Storage.Put

            // Act
            var vulnerabilities = _detector.Detect(_state, VMState.HALT).ToList();

            // Assert
            Assert.IsTrue(vulnerabilities.Any(v => v.Type == "OracleResponseManipulation"),
                "Should detect oracle response manipulation");
        }

        [TestMethod]
        public void Detect_MultipleOracleRequests()
        {
            // Arrange - Create a state with multiple oracle requests

            // First oracle request
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.SYSCALL)); // Oracle.Request

            // Second oracle request
            _state.ExecutionTrace.Add(TestHelpers.CreateExecutionStep(OpCode.SYSCALL)); // Oracle.Request

            // No synchronization between requests

            // Act
            var vulnerabilities = _detector.Detect(_state, VMState.HALT).ToList();

            // Assert
            Assert.IsTrue(vulnerabilities.Any(v => v.Type == "MultipleOracleRequests"),
                "Should detect multiple oracle requests without synchronization");
        }
    }
}
