name: .NET Core Test and Publish

on:
  push:
    branches: [master]
  pull_request:

env:
  DOTNET_VERSION: 8.0.x
  DOTNET_TEST_PARAMETERS: --no-build /p:CollectCoverage=true
  COVERLET_EXCLUDE_COVERAGE: /p:Exclude=\"[Neo.SmartContract.TestEngine]*,[Neo.Compiler.CSharp.UnitTests]*,[Neo]*,[Neo.IO]*,[Neo.Json]*,[Neo.VM]*,[Neo.Extensions]*,[Neo.Cryptography.BLS12_381]*\"
  COVERLET_OUTPUT: /p:CoverletOutput=${{ github.workspace }}/coverage/
  COVERLET_MERGE_WITH: /p:MergeWith=${{ github.workspace }}/coverage/coverage.json
  COVERLET_OUTPUT_FORMAT: /p:CoverletOutputFormat=lcov

jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Cache .NET packages and build output
      uses: actions/cache@v3
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/**/bin
          ${{ github.workspace }}/**/obj
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-
    - name: Check format
      run: dotnet format --no-restore --verify-no-changes --verbosity diagnostic
    - name: Build Solution
      run: dotnet build ./neo-devpack-dotnet.sln
    - name: Add package coverlet.msbuild
      run: find tests -name *.csproj | xargs -I % dotnet add % package coverlet.msbuild

  Test-Compiler:
    name: Test Neo.Compiler.CSharp
    needs: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore .NET packages and build output
      uses: actions/cache@v3
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/**/bin
          ${{ github.workspace }}/**/obj
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
    - name: Test Neo.Compiler.CSharp.UnitTests
      run: |
        dotnet test ./tests/Neo.Compiler.CSharp.UnitTests/Neo.Compiler.CSharp.UnitTests.csproj \
        ${{ env.DOTNET_TEST_PARAMETERS }} \
        ${{ env.COVERLET_OUTPUT }} \
        ${{ env.COVERLET_OUTPUT_FORMAT }}
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-compiler
        path: ${{ github.workspace }}/coverage/coverage.info
        if-no-files-found: error

  Test-Framework:
    name: Test Neo.SmartContract.Framework
    needs: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore .NET packages and build output
      uses: actions/cache@v3
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/**/bin
          ${{ github.workspace }}/**/obj
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
    - name: Test Neo.SmartContract.Framework.UnitTests
      run: |
        dotnet test ./tests/Neo.SmartContract.Framework.UnitTests/Neo.SmartContract.Framework.UnitTests.csproj \
        ${{ env.DOTNET_TEST_PARAMETERS }} \
        ${{ env.COVERLET_OUTPUT }} \
        ${{ env.COVERLET_MERGE_WITH }} \
        ${{ env.COVERLET_EXCLUDE_COVERAGE }} \
        ${{ env.COVERLET_OUTPUT_FORMAT }}
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-framework
        path: ${{ github.workspace }}/coverage/coverage.info
        if-no-files-found: error

  Test-Testing:
    name: Test Neo.SmartContract.Testing
    needs: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore .NET packages and build output
      uses: actions/cache@v3
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/**/bin
          ${{ github.workspace }}/**/obj
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
    - name: Test Neo.SmartContract.Testing.UnitTests
      run: |
        dotnet test ./tests/Neo.SmartContract.Testing.UnitTests/Neo.SmartContract.Testing.UnitTests.csproj \
        ${{ env.DOTNET_TEST_PARAMETERS }} \
        ${{ env.COVERLET_OUTPUT }} \
        ${{ env.COVERLET_MERGE_WITH }} \
        ${{ env.COVERLET_EXCLUDE_COVERAGE }} \
        ${{ env.COVERLET_OUTPUT_FORMAT }}
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-testing
        path: ${{ github.workspace }}/coverage/coverage.info
        if-no-files-found: error

  Test-Template:
    name: Test Neo.SmartContract.Template
    needs: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore .NET packages and build output
      uses: actions/cache@v3
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/**/bin
          ${{ github.workspace }}/**/obj
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
    - name: Test Neo.SmartContract.Template.UnitTests
      run: |
        dotnet test ./tests/Neo.SmartContract.Template.UnitTests/Neo.SmartContract.Template.UnitTests.csproj \
        ${{ env.DOTNET_TEST_PARAMETERS }} \
        ${{ env.COVERLET_MERGE_WITH }} \
        ${{ env.COVERLET_EXCLUDE_COVERAGE }} \
        ${{ env.COVERLET_OUTPUT }} \
        ${{ env.COVERLET_OUTPUT_FORMAT }}
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-template
        path: ${{ github.workspace }}/coverage/coverage.info
        if-no-files-found: error

  Coverage:
    name: Coverage
    needs: [Test-Compiler, Test-Framework, Test-Testing, Test-Template]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        path: ${{ github.workspace }}/coverage
    - name: Merge coverage reports
      run: |
        sudo apt-get install -y lcov
        lcov $(find ${{ github.workspace }}/coverage -name '*.info' -printf '-a %p ') -o ${{ github.workspace }}/coverage/lcov.info
    - name: Coveralls
      uses: coverallsapp/github-action@v2.3.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        format: lcov
        file: ${{ github.workspace }}/coverage/lcov.info

  Cleanup:
    name: Cleanup Artifacts
    needs: Coverage
    runs-on: ubuntu-latest
    if: always()
    steps:
    - uses: geekyeggo/delete-artifact@v2
      with:
        name: build-results

  PublishPackage:
    if: github.ref == 'refs/heads/master' && startsWith(github.repository, 'neo-project/')
    needs: Test-Compiler
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Set Version (dev-pack)
      run: git rev-list --count HEAD | xargs printf 'CI%05d' | xargs -I{} echo 'VERSION_SUFFIX={}' >> $GITHUB_ENV
    - name: Set Version (Neo)
      run: |
        git --git-dir=./neo/.git rev-list --count HEAD | xargs printf 'CI%05d' | xargs -I{} echo 'VERSION_SUFFIX_NEO={}' >> $GITHUB_ENV
        sed -n 's/.*<VersionPrefix>\(.*\)<\/VersionPrefix>.*/\1/p' ./neo/src/Directory.Build.props | xargs -I{} echo 'VERSION_NEO={}' >> $GITHUB_ENV

    - name : Pack (Neo.SmartContract.Framework)
      run: |
        dotnet pack ./src/Neo.SmartContract.Framework \
        --configuration Debug \
        --output ./out \
        --version-suffix ${{ env.VERSION_SUFFIX }}
    - name : Replace Neo reference by package in Neo.SmartContract.Testing
      run: |
        dotnet remove ./src/Neo.SmartContract.Testing/Neo.SmartContract.Testing.csproj reference '..\..\neo\src\Neo\Neo.csproj'
        dotnet add    ./src/Neo.SmartContract.Testing/Neo.SmartContract.Testing.csproj package 'Neo' --version ${{ env.VERSION_NEO }}-${{ env.VERSION_SUFFIX_NEO }}
    - name : Build (Neo.SmartContract.Testing)
      run: |
        dotnet build ./src/Neo.SmartContract.Testing -f net8.0
        dotnet build ./src/Neo.SmartContract.Testing -f netstandard2.1
    - name : Pack (Neo.SmartContract.Testing)
      run: |
        dotnet pack ./src/Neo.SmartContract.Testing \
        --no-build \
        --configuration Debug \
        --output ./out \
        --version-suffix ${{ env.VERSION_SUFFIX }}
    - name: Publish to Github Packages
      working-directory: ./out
      run: |
        dotnet nuget push * \
            --source https://nuget.pkg.github.com/neo-project/index.json \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --disable-buffering \
            --no-service-endpoint;
    - name: Publish to myGet
      working-directory: ./out
      run: |
        dotnet nuget push * \
            --source https://www.myget.org/F/neo/api/v3/index.json \
            --api-key "${{ secrets.MYGET_TOKEN }}" \
            --disable-buffering \
            --no-service-endpoint;

  Release:
    if: github.ref == 'refs/heads/master' && startsWith(github.repository, 'neo-project/')
    needs: Test-Compiler
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Get version
      id: get_version
      run: |
        sudo apt install xmlstarlet
        find src -name Directory.Build.props | xargs xmlstarlet sel -N i=http://schemas.microsoft.com/developer/msbuild/2003 -t -v "concat('::set-output name=version::v',//i:VersionPrefix/text())" | xargs echo
    - name: Check tag
      id: check_tag
      run: curl -s -I ${{ format('https://github.com/{0}/releases/tag/{1}', github.repository, steps.get_version.outputs.version) }} | head -n 1 | cut -d$' ' -f2 | xargs printf "::set-output name=statusCode::%s" | xargs echo
    - name: Create release
      if: steps.check_tag.outputs.statusCode == '404'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: ${{ steps.get_version.outputs.version }}
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
    - name: Setup .NET Core
      if: steps.check_tag.outputs.statusCode == '404'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Publish to NuGet
      if: steps.check_tag.outputs.statusCode == '404'
      run: |
        dotnet sln neo-devpack-dotnet.sln remove ./neo/src/neo/neo.csproj
        dotnet sln neo-devpack-dotnet.sln remove ./neo/src/Neo.Cryptography.BLS12_381/Neo.Cryptography.BLS12_381.csproj
        dotnet sln neo-devpack-dotnet.sln remove ./neo/src/Neo.Extensions/Neo.Extensions.csproj
        dotnet sln neo-devpack-dotnet.sln remove ./neo/src/Neo.IO/Neo.IO.csproj
        dotnet sln neo-devpack-dotnet.sln remove ./neo/src/Neo.Json/Neo.Json.csproj
        dotnet sln neo-devpack-dotnet.sln remove ./neo/src/Neo.VM/Neo.VM.csproj
        dotnet pack -o pub -c Release
        dotnet nuget push "pub/*.nupkg" -s https://api.nuget.org/v3/index.json -k ${NUGET_TOKEN} --skip-duplicate
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
